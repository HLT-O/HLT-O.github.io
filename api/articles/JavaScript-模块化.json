{"title":"JavaScript 模块化","uid":"27ab440eca5b68e7c8a1f3c654267291","slug":"JavaScript-模块化","date":"2022-08-02T12:47:58.000Z","updated":"2022-08-04T10:01:37.342Z","comments":true,"path":"api/articles/JavaScript-模块化.json","keywords":null,"cover":null,"content":"<h2 id=\"一-什么是模块化\"><a href=\"#一-什么是模块化\" class=\"headerlink\" title=\"一. 什么是模块化\"></a>一. 什么是模块化</h2><ul>\n<li>将一个复杂的程序，依据一定的规则（规范）封装成一个或多个块（文件）</li>\n<li>块的内部实现是私有的，只暴露一些接口（方法）供外部使用</li>\n</ul>\n<h2 id=\"二-模块化的发展过程\"><a href=\"#二-模块化的发展过程\" class=\"headerlink\" title=\"二. 模块化的发展过程\"></a>二. 模块化的发展过程</h2><h3 id=\"2-1-无模块化时代\"><a href=\"#2-1-无模块化时代\" class=\"headerlink\" title=\"2.1 无模块化时代\"></a>2.1 无模块化时代</h3><p>在 Ajax 还未提出之前，JavaScript 只用来在网页上进行表单校验提交，渲染 DOM</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> 某 <span class=\"token punctuation\">.</span>js 文件 <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n\n<span class=\"token keyword\">var</span> str<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  str <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">...</span>\n  num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \nform<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> 某 <span class=\"token punctuation\">.</span>html 文件 <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"a.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"b.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"main.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>缺点：全局变量污染、函数命名冲突、文件依赖顺序</p>\n<h3 id=\"2-2-模块化雏形时代\"><a href=\"#2-2-模块化雏形时代\" class=\"headerlink\" title=\"2.2 模块化雏形时代\"></a>2.2 模块化雏形时代</h3><p>2006 年，Ajax 的概念被提出，前端拥有了 主动向服务端发送请求，并操作返回数据 的能力，传统网页向 “富客户端” 发展出现了简单的 “功能对象” 封装</p>\n<h4 id=\"2-2-1-namespace-模式\"><a href=\"#2-2-1-namespace-模式\" class=\"headerlink\" title=\"2.2.1 namespace 模式\"></a>2.2.1 namespace 模式</h4><ul>\n<li>优点：减少了全局变量</li>\n<li>缺点：数据不安全（外部可以直接修改模块内部的数据），模块名称会暴露在全局，存在命名冲突，依赖顺序问题</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> 模块 <span class=\"token punctuation\">.</span>js 文件 <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \n<span class=\"token keyword\">var</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">first_name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">second_name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"baidu.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getFullName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>second_name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> <span class=\"token punctuation\">.</span>html文件 调用 模块<span class=\"token punctuation\">.</span>js <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \nmyModule<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"img.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myModule<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"2-2-2-自执行匿名函数（闭包）模式\"><a href=\"#2-2-2-自执行匿名函数（闭包）模式\" class=\"headerlink\" title=\"2.2.2 自执行匿名函数（闭包）模式\"></a>2.2.2 自执行匿名函数（闭包）模式</h4><ul>\n<li>优点：变量、方法全局隐藏，模块私有化</li>\n<li>缺点：模块名称会暴露在全局，存在命名冲突，依赖顺序问题</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> 模块 <span class=\"token punctuation\">.</span>js 文件 <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">window</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> _moduleName <span class=\"token operator\">=</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    _moduleName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _moduleName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  window<span class=\"token punctuation\">.</span>moduleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> setModuleName<span class=\"token punctuation\">,</span> getModuleName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> <span class=\"token punctuation\">.</span>html文件 调用 模块<span class=\"token punctuation\">.</span>js <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \nmoduleA<span class=\"token punctuation\">.</span><span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moduleA<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moduleA<span class=\"token punctuation\">.</span>_moduleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//模块不暴露，无法访问模块内属性方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-3-模块化雏形时代问题总结\"><a href=\"#2-2-3-模块化雏形时代问题总结\" class=\"headerlink\" title=\"2.2.3 模块化雏形时代问题总结\"></a>2.2.3 模块化雏形时代问题总结</h4><ul>\n<li>如何安全的封装一个模块的代码？（不污染模块外的任何代码）</li>\n<li>如何唯一标识一个模块？</li>\n<li>如何优雅的把模块的 API 暴漏出去？（不能增加全局变量）</li>\n<li>如何方便的使用所依赖的模块？</li>\n</ul>\n<h2 id=\"三-模块化规范\"><a href=\"#三-模块化规范\" class=\"headerlink\" title=\"三. 模块化规范\"></a>三. 模块化规范</h2><h3 id=\"3-1-CommonJS\"><a href=\"#3-1-CommonJS\" class=\"headerlink\" title=\"3.1 CommonJS\"></a>3.1 CommonJS</h3><p>2009 年 Node.js 发布，采用 CommonJS 模块规范</p>\n<p>CommonJS 模块规范特点：</p>\n<ul>\n<li>每个文件都是一个模块实例，代码运行在模块作用域，不会污染全局作用域</li>\n<li>文件内通过 require 对象引入指定模块，通过 exports 对象来向外暴漏 API，文件内定义的变量、函数，都是私有的，对其他文件不可见</li>\n<li>每个模块加载一次之后就会被 缓存</li>\n<li>所有文件加载均是 同步完成，加载的顺序，按照其在代码中出现的顺序</li>\n<li>模块输出的是一个值的拷贝，模块内部的变化不会影响该值</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> 模块 <span class=\"token punctuation\">.</span>js 文件 <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \n<span class=\"token keyword\">let</span> _moduleName <span class=\"token operator\">=</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  _moduleName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> _moduleName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> setModuleName<span class=\"token punctuation\">,</span> getModuleName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> <span class=\"token punctuation\">.</span>html文件 调用 模块<span class=\"token punctuation\">.</span>js <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getModuleName<span class=\"token punctuation\">,</span> setModuleName <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./es6.module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"es6 Module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>缺点：模块同步加载导致：资源消耗多，等待时间长，适用于服务器编程</strong></p>\n<h3 id=\"3-2-AMD-x2F-RequireJS\"><a href=\"#3-2-AMD-x2F-RequireJS\" class=\"headerlink\" title=\"3.2 AMD &#x2F; RequireJS\"></a>3.2 AMD &#x2F; RequireJS</h3><p>Commonjs 局限性：</p>\n<ul>\n<li>基于 Node.js 原生 API 在服务端可以实现模块 同步加载，但仅局限于服务端，客户端如果同步加载依赖的话，时间消耗非常大，于是 AMD 规范诞生了</li>\n</ul>\n<p>何谓 AMD？</p>\n<ul>\n<li>AMD 是 ”Asynchronous Module Definition” 的缩写，意思就是 ”异步模块定义”</li>\n<li>它采用 异步方式 加载模块，模块的加载不影响它后面语句的运行</li>\n<li>所有依赖这个模块的语句，都定义在一个回调函数中，等到所有依赖加载完成之后（依赖前置），这个回调函数才会运行</li>\n</ul>\n<p>何谓 RequireJS？</p>\n<ul>\n<li>RequireJS 是一个工具库，主要用于客户端的模块管理，它的模块管理遵守 AMD 规范</li>\n<li>RequireJS 的基本思想：通过 define 方法将代码定义为模块，通过 require 方法实现代码的模块加载</li>\n</ul>\n<p>举个栗子：定义两个模块，一个没有依赖，一个有依赖</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// module1.js 定义没有依赖的模块</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> _moduleName <span class=\"token operator\">=</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _moduleName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> getName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 暴露模块</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token comment\">// module2.js 定义有依赖的模块</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"module1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> _firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"AMD\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> module1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    _firstName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 暴露模块</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> _firstName<span class=\"token punctuation\">,</span> getFullName<span class=\"token punctuation\">,</span> setFirstName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>在 main.js 中使用这两个模块</li>\n<li>main.js 相当于一个工具库，对各种模块路径、基本使用方法进行封装</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mian.js</span>\nrequire<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">module1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./modules/module1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./modules/module2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 第三方库模块</span>\n    <span class=\"token literal-property property\">jquery</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./libs/jquery.min\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"module2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jquery\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module2<span class=\"token punctuation\">,</span> jquery</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>module2<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  module2<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AMD-AMD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>module2<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>module2<span class=\"token punctuation\">.</span>_firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">jquery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#moduleId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;i>My name is jquery-module&lt;/i>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>.html 中引入工具库，并定义 js 主文件</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .html 中引入工具库，并定义js主文件</span>\n<span class=\"token operator\">&lt;</span>script data<span class=\"token operator\">-</span>main<span class=\"token operator\">=</span><span class=\"token string\">\"./main\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./libs/require.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>AMD &#x2F; RequireJS 特点：浏览器直接运行无需编译，异步加载，依赖关系清晰</li>\n</ul>\n<h3 id=\"3-3-CMD-x2F-SeaJS\"><a href=\"#3-3-CMD-x2F-SeaJS\" class=\"headerlink\" title=\"3.3 CMD &#x2F; SeaJS\"></a>3.3 CMD &#x2F; SeaJS</h3><p>借鉴了 Commonjs 的规范与 AMD 规范，国内（阿里）诞生了一个 CMD（Common Module Definition）规范，CMD 规范专门用于浏览器端<br>跟 RequireJs 类似，SeaJs 是 CMD 规范的实现<br>CMD 是 SeaJs 推广过程中诞生的规范，CMD 借鉴了很多 AMD 和 Commonjs 优点</p>\n<p>与 AMD 非常类似，CMD 规范（2011）具有以下特点：</p>\n<ul>\n<li>define 定义模块，require 加载模块，exports 暴露变量</li>\n<li>不同于 AMD 的依赖前置，CMD 推崇依赖就近（需要的时候再加载）</li>\n<li>推崇 api 功能单一，一个模块干一件事</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// module.1</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"I am module1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// module.2</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> module2 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./module1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步引入依赖模块1 \"</span> <span class=\"token operator\">+</span> module2<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  exports<span class=\"token punctuation\">.</span>showModule <span class=\"token operator\">=</span> show<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token comment\">// main.js</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> m2 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./modules/module2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  m2<span class=\"token punctuation\">.</span><span class=\"token function\">showModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token comment\">// .html中引入工具库，并定义 js 主文件</span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./libs/sea.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n  seajs<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./main'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-4-AMD-vs-CMD\"><a href=\"#3-4-AMD-vs-CMD\" class=\"headerlink\" title=\"3.4 AMD vs CMD\"></a>3.4 AMD vs CMD</h3><ul>\n<li>AMD 推崇依赖前置</li>\n<li>CMD 推崇依赖就近</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// AMD</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'./a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 依赖必须一开始就写好</span>\n a<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token operator\">...</span>\n b<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n \n \n<span class=\"token comment\">// CMD</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a'</span><span class=\"token punctuation\">)</span>\n a<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token operator\">...</span>\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 依赖可以就近书写</span>\n b<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"四-ES6-与-JavaScript模块化-关系\"><a href=\"#四-ES6-与-JavaScript模块化-关系\" class=\"headerlink\" title=\"四. ES6 与 JavaScript模块化 关系\"></a>四. ES6 与 JavaScript模块化 关系</h2><h3 id=\"4-1-ES6-中的模块化示例\"><a href=\"#4-1-ES6-中的模块化示例\" class=\"headerlink\" title=\"4.1 ES6 中的模块化示例\"></a>4.1 ES6 中的模块化示例</h3><p>2015 年，ES6 规范中，将 JavaScript模块化 纳入 JavaScript 标准<br>ES6 中的模块化，在 CommonJS 的基础上进行改造，关键字有 import，export，default，as，from</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 模块js</span>\n<span class=\"token keyword\">let</span> _moduleName <span class=\"token operator\">=</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  _moduleName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> _moduleName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> setModuleName<span class=\"token punctuation\">,</span> getModuleName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n \n \n<span class=\"token comment\">// 调用js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getModuleName<span class=\"token punctuation\">,</span> setModuleName <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./es6.module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"es6 Module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-2-CommonJS-vs-ES6\"><a href=\"#4-2-CommonJS-vs-ES6\" class=\"headerlink\" title=\"4.2 CommonJS vs ES6\"></a>4.2 CommonJS vs ES6</h3><ul>\n<li><p>模块内部值的改变 是否影响 外部引用的该模块？</p>\n<ol>\n<li>CommonJS 模块输出的是一个值的拷贝，原来模块中的值改变，不会影响已经加载模块中的值</li>\n<li>ES6 模块输出的是值的只读引用，模块内值改变，引用也改变</li>\n</ol>\n</li>\n<li><p>模块导出内容范围？</p>\n<ol>\n<li>CommonJS 模块是运行时加载，加载的是整个模块，所有的接口会全部加载</li>\n<li>ES6 模块是编译时输出接口，可以单独加载其中的某个接口</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"五-CommonJS-vs-AMD-vs-CMD-vs-ES6\"><a href=\"#五-CommonJS-vs-AMD-vs-CMD-vs-ES6\" class=\"headerlink\" title=\"五. CommonJS vs AMD vs CMD vs ES6\"></a>五. CommonJS vs AMD vs CMD vs ES6</h2><ul>\n<li>CommonJS 规范主要用于服务端编程，加载模块是同步的；不适合在浏览器环境，因为浏览器资源是异步加载的，存在阻塞加载，也因此有了 AMD、CMD</li>\n<li>AMD 规范在浏览器环境中，异步加载模块，而且可以并行加载多个模块</li>\n<li>CMD 规范与 AMD 规范很相似，都用于浏览器编程，依赖就近，代码更简单</li>\n<li>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为 浏览器 - 和 服务器 通用的模块解决方案</li>\n</ul>\n","feature":true,"text":"一. 什么是模块化 将一个复杂的程序，依据一定的规则（规范）封装成一个或多个块（文件） 块的内部实现是私有的，只暴露一些接口（方法）供外部使用 二. 模块化的发展过程2.1 无模块化时代在 Ajax 还未提出之前，JavaScript 只用来在网页上进行表单校验提交，渲染 DOM...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">一. 什么是模块化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8F%91%E5%B1%95%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">二. 模块化的发展过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%97%A0%E6%A8%A1%E5%9D%97%E5%8C%96%E6%97%B6%E4%BB%A3\"><span class=\"toc-text\">2.1 无模块化时代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%A8%A1%E5%9D%97%E5%8C%96%E9%9B%8F%E5%BD%A2%E6%97%B6%E4%BB%A3\"><span class=\"toc-text\">2.2 模块化雏形时代</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-namespace-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2.2.1 namespace 模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-2-%E8%87%AA%E6%89%A7%E8%A1%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%EF%BC%88%E9%97%AD%E5%8C%85%EF%BC%89%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2.2.2 自执行匿名函数（闭包）模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-3-%E6%A8%A1%E5%9D%97%E5%8C%96%E9%9B%8F%E5%BD%A2%E6%97%B6%E4%BB%A3%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">2.2.3 模块化雏形时代问题总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">三. 模块化规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-CommonJS\"><span class=\"toc-text\">3.1 CommonJS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-AMD-x2F-RequireJS\"><span class=\"toc-text\">3.2 AMD &#x2F; RequireJS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-CMD-x2F-SeaJS\"><span class=\"toc-text\">3.3 CMD &#x2F; SeaJS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-AMD-vs-CMD\"><span class=\"toc-text\">3.4 AMD vs CMD</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B-ES6-%E4%B8%8E-JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96-%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">四. ES6 与 JavaScript模块化 关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-ES6-%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4.1 ES6 中的模块化示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-CommonJS-vs-ES6\"><span class=\"toc-text\">4.2 CommonJS vs ES6</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94-CommonJS-vs-AMD-vs-CMD-vs-ES6\"><span class=\"toc-text\">五. CommonJS vs AMD vs CMD vs ES6</span></a></li></ol>","author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"DOM与虚拟DOM","uid":"7792391404509b46b9c8e9c39373506c","slug":"虚拟DOM","date":"2022-07-28T13:57:49.000Z","updated":"2022-08-05T02:03:33.122Z","comments":true,"path":"api/articles/虚拟DOM.json","keywords":null,"cover":[],"text":"DOM是什么？官方是这么说的：文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}