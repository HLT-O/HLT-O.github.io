{"title":"DOM与虚拟DOM","uid":"7792391404509b46b9c8e9c39373506c","slug":"虚拟DOM","date":"2022-07-28T13:57:49.000Z","updated":"2022-08-04T10:19:58.423Z","comments":true,"path":"api/articles/虚拟DOM.json","keywords":null,"cover":[],"content":"<h2 id=\"DOM是什么？\"><a href=\"#DOM是什么？\" class=\"headerlink\" title=\"DOM是什么？\"></a>DOM是什么？</h2><p>官方是这么说的：<br>文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将 web 页面和脚本或程序语言连接起来。</p>\n<p>一个 web 页面是一个文档。这个文档可以在浏览器窗口或作为 HTML 源码显示出来。但上述两个情况中都是同一份文档。文档对象模型（DOM）提供了对同一份文档的另一种表现，存储和操作的方式。 DOM 是 web 页面的完全的面向对象表述，它能够使用如 JavaScript 等脚本语言进行修改。</p>\n<p>我是这么理解的：<br>DOM是由浏览器提供，用于映射<strong>HTML</strong>，为什么是映射呢，因为HTML改变后，浏览器页面也会发生改变，之所以页面会改变（重绘或重排），是因为DOM树发生了改变。相反，我们直接修改DOM，HTML也会跟着变。</p>\n<h2 id=\"虚拟-DOM\"><a href=\"#虚拟-DOM\" class=\"headerlink\" title=\"虚拟 DOM\"></a>虚拟 DOM</h2><p>虚拟DOM概念随着react的诞生而诞生，由facebook提出，其卓越的性能很快得到广大开发者的认可；继react之后vue2.0也在其核心引入了虚拟DOM的概念</p>\n<h3 id=\"什么是虚拟DOM-VDOM-？\"><a href=\"#什么是虚拟DOM-VDOM-？\" class=\"headerlink\" title=\"什么是虚拟DOM(VDOM)？\"></a>什么是虚拟DOM(VDOM)？</h3><p>vdom可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息。dom 树对应的虚拟 dom 对象（ js 对象），如下：<br><img src=\"../codeImg/code-html.png\" style=\"width:500px;\"><br><img src=\"../codeImg/code-vnode.png\" style=\"width:500px;\"><br>可见上面的DOM结构，不论是标签名称还是标签的属性或标签的子集，都会对应在下面的树结构里。</p>\n<h3 id=\"为什么要使用虚拟DOM？\"><a href=\"#为什么要使用虚拟DOM？\" class=\"headerlink\" title=\"为什么要使用虚拟DOM？\"></a>为什么要使用虚拟DOM？</h3><p>虚拟 dom 是相对于浏览器所渲染出来的真实 dom 的，在react，vue等技术出现之前，我们要改变页面展示的内容只能通过遍历查询 dom 树的方式找到需要修改的 dom 然后修改样式行为或者结构，来达到更新 ui 的目的。这种方式相当消耗计算资源，因为每次查询 dom 几乎都需要遍历整颗 dom 树，如果建立一个与 dom 树对应的虚拟 dom 对象（ js 对象），以对象嵌套的方式来表示 dom 树，那么每次 dom 的更改 就变成了 js 对象的属性的更改 ，这样一来就能查找 js 对象的属性变化要比查询 dom 树的 性能开销小。</p>\n<p>其实并不是查询 dom 树性能开销大而是 dom 树的实现模块和 js 模块是分开的这些跨模块的通讯增加了成本，以及 dom 操作引起的浏览器的回流和重绘，使得性能开销巨大，原本在 pc 端是没有性能问题的，因为 pc 的计算能力强，但是随着移动端的发展，越来越多的网页在智能手机上运行，而手机的性能参差不齐，会有性能问题。</p>\n<p>他们的思想是每次更新 dom 都尽量避免刷新整个页面，而是有针对性的 去刷新那被更改的一部分 ，来释放掉被无效渲染占用的 gpu，cup 性能。</p>\n<h3 id=\"DOM与虚拟DOM的区别\"><a href=\"#DOM与虚拟DOM的区别\" class=\"headerlink\" title=\"DOM与虚拟DOM的区别\"></a>DOM与虚拟DOM的区别</h3><ul>\n<li>虚拟dom不会进行重绘和回流，而真实dom会频繁重排与重绘</li>\n<li>虚拟dom的总损耗是“虚拟dom的增删改+真实dom的差异增删改+重排”<br>真实dom的消耗是“真实dom全部增删改+重排”</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>1.真实dom<br>优点：</p>\n<ul>\n<li>直接操作HTML，易用</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>解析速度慢，效率低，内存占用量高</li>\n<li>性能差：频繁操作真实DOM，导致重绘、回流</li>\n</ul>\n<p>2.虚拟dom<br>​优点：</p>\n<ul>\n<li>减少真实dom的频繁更新，减少重绘回流、占用内存少</li>\n<li>跨平台：一套react代码可以多端运行</li>\n</ul>\n<p>​缺点：</p>\n<ul>\n<li>页面首次渲染时，由于多一层虚拟dom的计算，速度比正常慢些</li>\n</ul>\n<h3 id=\"虚拟dom的原理\"><a href=\"#虚拟dom的原理\" class=\"headerlink\" title=\"虚拟dom的原理\"></a>虚拟dom的原理</h3><p>diff算法 深度优先遍历，diff的过程就是调用patch函数，就像打补丁一样修改真实dom</p>\n<h4 id=\"snabbdom\"><a href=\"#snabbdom\" class=\"headerlink\" title=\"snabbdom\"></a>snabbdom</h4><p><strong>snabbdom</strong> 是一个虚拟 DOM 库，github仓库: <a href=\"https://github.com/snabbdom/snabbdom/blob/master/README-zh_CN.md#elm--element/\">snabbdom</a>.<br>vue的虚拟DOM就是参考的snabbdom</p>\n<p>我们以sanbbdom为例，来看看虚拟DOM的原理<br>下面是 官网的案例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>\n  init<span class=\"token punctuation\">,</span>\n  classModule<span class=\"token punctuation\">,</span>\n  propsModule<span class=\"token punctuation\">,</span>\n  styleModule<span class=\"token punctuation\">,</span>\n  eventListenersModule<span class=\"token punctuation\">,</span>\n  h<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"snabbdom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> patch <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// 通过传入模块初始化 patch 函数</span>\n  classModule<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开启 classes 功能</span>\n  propsModule<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 支持传入 props</span>\n  styleModule<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 支持内联样式同时支持动画</span>\n  eventListenersModule<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 添加事件监听</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div#container.two.classes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">click</span><span class=\"token operator\">:</span> someFn <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">fontWeight</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bold\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is bold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\" and this is just normal text\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/foo\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I'll take you places!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 传入一个空的元素节点 - 将产生副作用（修改该节点）</span>\n<span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newVnode <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"div#container.two.classes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">click</span><span class=\"token operator\">:</span> anotherEventHandler <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">fontWeight</span><span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">fontStyle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"italic\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"This is now italic type\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\" and this is still just normal text\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/bar\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I'll take you places!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 再次调用 `patch`</span>\n<span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> newVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将旧节点更新为新节点</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>snabbdom 使用 <strong>h</strong> 函数来生成 <strong>vnode</strong> ， 再通过 <strong>patch</strong> 函数去完成 DOM 的更新</p>\n<p>那么 patch 函数又干了些什么呢，</p>\n<h3 id=\"虚拟DOM有哪些好处\"><a href=\"#虚拟DOM有哪些好处\" class=\"headerlink\" title=\"虚拟DOM有哪些好处\"></a>虚拟DOM有哪些好处</h3><p>虚拟 DOM 不会立马进行排版与重绘操作<br>虚拟 DOM 进行频繁修改，然后一次性比较并修改真实 DOM 中需要改的部分，最后在真实 DOM 中进行排版与重绘，减少过多DOM节点排版与重绘损耗<br>虚拟 DOM 有效降低大面积真实 DOM 的重绘与排版，因为最终与真实 DOM 比较差异，可以只渲染局部<br>虚拟DOM主要做了什么<br>虚拟DOM本身是什么（JS对象）<br>为什么虚拟 DOM 的操作比 DOM 更快；<br>总之，一切为了减弱频繁的大面积重绘引发的性能问题，不同框架不一定需要虚拟DOM，关键看框架是否频繁会引发大面积的DOM操作</p>\n<h3 id=\"浏览器的虚拟DOM与真实DOM的区别（注意：需不需要虚拟DOM，其实与框架的DOM操作机制有关）\"><a href=\"#浏览器的虚拟DOM与真实DOM的区别（注意：需不需要虚拟DOM，其实与框架的DOM操作机制有关）\" class=\"headerlink\" title=\"浏览器的虚拟DOM与真实DOM的区别（注意：需不需要虚拟DOM，其实与框架的DOM操作机制有关）\"></a>浏览器的虚拟DOM与真实DOM的区别（注意：需不需要虚拟DOM，其实与框架的DOM操作机制有关）</h3><p>虚拟DOM不会进行排版与重绘操作<br>虚拟DOM进行频繁修改，然后一次性比较并修改真实DOM中需要改的部分（注意！），最后并在真实DOM中进行排版与重绘，减少过多DOM节点排版与重绘损耗<br>真实DOM频繁排版与重绘的效率是相当低的<br>虚拟DOM有效降低大面积（真实DOM节点）的重绘与排版，因为最终与真实DOM比较差异，可以只渲染局部（同2）<br>使用虚拟DOM的损耗计算：<br>总损耗&#x3D;虚拟DOM增删改+（与Diff算法效率有关）真实DOM差异增删改+（较少的节点）排版与重绘<br>直接使用真实DOM的损耗计算：<br>总损耗&#x3D;真实DOM完全增删改+（可能较多的节点）排版与重绘<br>总之，一切为了减弱频繁的大面积重绘引发的性能问题，不同框架不一定需要虚拟DOM，关键看框架是否频繁会引发大面积的DOM操作</p>\n","feature":true,"text":"DOM是什么？官方是这么说的：文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DOM%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">DOM是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F-DOM\"><span class=\"toc-text\">虚拟 DOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9FDOM-VDOM-%EF%BC%9F\"><span class=\"toc-text\">什么是虚拟DOM(VDOM)？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9FDOM%EF%BC%9F\"><span class=\"toc-text\">为什么要使用虚拟DOM？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOM%E4%B8%8E%E8%99%9A%E6%8B%9FDOM%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">DOM与虚拟DOM的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9Fdom%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">虚拟dom的原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#snabbdom\"><span class=\"toc-text\">snabbdom</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9FDOM%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">虚拟DOM有哪些好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%99%9A%E6%8B%9FDOM%E4%B8%8E%E7%9C%9F%E5%AE%9EDOM%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E6%B3%A8%E6%84%8F%EF%BC%9A%E9%9C%80%E4%B8%8D%E9%9C%80%E8%A6%81%E8%99%9A%E6%8B%9FDOM%EF%BC%8C%E5%85%B6%E5%AE%9E%E4%B8%8E%E6%A1%86%E6%9E%B6%E7%9A%84DOM%E6%93%8D%E4%BD%9C%E6%9C%BA%E5%88%B6%E6%9C%89%E5%85%B3%EF%BC%89\"><span class=\"toc-text\">浏览器的虚拟DOM与真实DOM的区别（注意：需不需要虚拟DOM，其实与框架的DOM操作机制有关）</span></a></li></ol></li></ol>","author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 模块化","uid":"27ab440eca5b68e7c8a1f3c654267291","slug":"JavaScript-模块化","date":"2022-08-02T12:47:58.000Z","updated":"2022-08-04T10:01:37.342Z","comments":true,"path":"api/articles/JavaScript-模块化.json","keywords":null,"cover":null,"text":"一. 什么是模块化 将一个复杂的程序，依据一定的规则（规范）封装成一个或多个块（文件） 块的内部实现是私有的，只暴露一些接口（方法）供外部使用 二. 模块化的发展过程2.1 无模块化时代在 Ajax 还未提出之前，JavaScript 只用来在网页上进行表单校验提交，渲染 DOM...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JS的一些小知识点","uid":"8b4c372403610b1ffccec2e1fcd54ba5","slug":"JS的一些小知识点","date":"2022-05-20T08:20:55.000Z","updated":"2022-08-02T12:24:11.216Z","comments":true,"path":"api/articles/JS的一些小知识点.json","keywords":null,"cover":"https://pic1.zhimg.com/v2-24b5a3482fee259eb8a3ad396b36d9b4_r.jpg?source=172ae18b","text":"var 、let 、const 的区别 var let const 作用域 函数作用域 块级作用域 块级作用域 变量提升 会变量提升，且会初始化赋值为undefined 会变量提升,但不会初始化(存在暂时性死区) 会变量提升,但不会初始化(存在暂时性死区) 能否修改 能修改 能修...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}