{"title":"Vue面试","uid":"79e2e1ab4b9bedc5846bde4a579442cd","slug":"Vue面试","date":"2022-05-18T11:02:15.000Z","updated":"2022-07-22T10:44:35.139Z","comments":true,"path":"api/articles/Vue面试.json","keywords":null,"cover":"https://pic3.zhimg.com/v2-dc178309e33a4623e88e491baa0421d3_r.jpg?source=172ae18b","content":"<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>生命周期图: <img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg#pic_center\" alt=\"Alt\"></p>\n<h2 id=\"keep-live\"><a href=\"#keep-live\" class=\"headerlink\" title=\"keep-live\"></a>keep-live</h2><h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li>include - string | RegExp | Array。只有名称匹配的组件会被缓存。</li>\n<li>exclude - string | RegExp | Array。任何名称匹配的组件都不会被缓存。</li>\n<li>max - number | string。最多可以缓存多少组件实例。</li>\n</ul>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><strong>&lt; keep-alive &gt;</strong> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <strong>&lt; transition &gt;</strong> 相似， <strong>&lt; keep-alive &gt;</strong> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</p>\n<p>当组件在 <strong>&lt; keep-alive &gt;</strong> 内被切换时，它的 mounted 和 unmounted 生命周期钩子不会被调用，取而代之的是 activated 和 deactivated。(这会运用在 <strong>&lt; keep-alive &gt;</strong> 的直接子节点及其所有子孙节点。)</p>\n<p>主要用于保留组件状态或避免重新渲染。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 基本 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 多个条件判断的子组件 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>comp<span class=\"token operator\">-</span>a v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"a > 1\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>comp<span class=\"token operator\">-</span>a<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>comp<span class=\"token operator\">-</span>b v<span class=\"token operator\">-</span><span class=\"token keyword\">else</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>comp<span class=\"token operator\">-</span>b<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 和 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;transition></span><span class=\"token template-punctuation string\">`</span></span> 一起使用 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>transition<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>transition<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意， <strong>&lt; keep-alive &gt;</strong> 是用在其一个直属的子组件被切换的情形。如果你在其中有 v-for 则不会工作。如果有上述的多个条件性的子元素，<keep-alive> 要求同时只有一个子元素被渲染。</p>\n<h3 id=\"include-和-exclude\"><a href=\"#include-和-exclude\" class=\"headerlink\" title=\"include 和 exclude\"></a>include 和 exclude</h3><p><strong>include</strong> 和 <strong>exclude prop</strong> 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 逗号分隔字符串 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive include<span class=\"token operator\">=</span><span class=\"token string\">\"a,b\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token function\">regex</span> <span class=\"token punctuation\">(</span>使用 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">v-bind</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"/a|b/\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token function\">Array</span> <span class=\"token punctuation\">(</span>使用 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">v-bind</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"['a', 'b']\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配。</p>\n<h3 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max\"></a>max</h3><p>最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>max<span class=\"token operator\">=</span><span class=\"token string\">\"10\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"view\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">警告</p>\n<p><strong>&lt; keep-alive &gt;</strong> 不会在函数式组件中正常工作，因为它们没有缓存实例。</p>\n</div>\n<h2 id=\"v-if-VS-v-show\"><a href=\"#v-if-VS-v-show\" class=\"headerlink\" title=\"v-if   VS   v-show\"></a>v-if   <strong>VS</strong>   v-show</h2><p><strong>v-if</strong> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p><strong>v-if</strong> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下， <strong>v-show</strong> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>\n<p>一般来说，<strong>v-if</strong> 有更高的切换开销，而 <strong>v-show</strong> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <strong>v-show</strong> 较好；如果在运行时条件很少改变，则使用 <strong>v-if</strong> 较好。</p>\n<h2 id=\"v-if-与-v-show-的优先级问题\"><a href=\"#v-if-与-v-show-的优先级问题\" class=\"headerlink\" title=\"v-if 与 v-show 的优先级问题\"></a>v-if 与 v-show 的优先级问题</h2><ul>\n<li>2.x 版本中在一个元素上同时使用 <strong>v-if</strong> 和 <strong>v-for</strong> 时，<strong>v-for</strong> 会优先作用。</li>\n<li>3.x 版本中 <strong>v-if</strong> 总是优先于 v-for 生效</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">注意</p>\n<p>不推荐同时使用 <strong>v-if</strong> 和 <strong>v-for</strong></p>\n</div>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p><strong>ref</strong> 被用来给元素或子组件注册引用信息。引用信息将会被注册在父组件的 <strong>$refs</strong> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是那个 DOM 元素；如果用在子组件上，引用就指向组件实例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>p ref<span class=\"token operator\">=</span><span class=\"token string\">\"p\"</span><span class=\"token operator\">></span>hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> vm<span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>child 会是子组件实例 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>child<span class=\"token operator\">-</span>component ref<span class=\"token operator\">=</span><span class=\"token string\">\"child\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">-</span>component<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 当动态绑定时，我们可以将 ref 定义为回调函数，显式地传递元素或组件实例 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>child<span class=\"token operator\">-</span>component <span class=\"token operator\">:</span>ref<span class=\"token operator\">=</span><span class=\"token string\">\"(el) => child = el\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">-</span>component<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于 ref 注册时机的重要说明：因为 ref 本身是作为渲染函数的结果而创建的，在初始渲染时你不能访问它们——它们还不存在！$refs 也是非响应式的，因此你不应该试图用它在模板中做数据绑定。</p>\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h2><p>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp<span class=\"token punctuation\">,</span> nextTick <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token comment\">//例一</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeMessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">newMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      message<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newMessage\n      <span class=\"token keyword\">await</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Now DOM is updated'</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//例二</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeMessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">newMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Now DOM is updated'</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">&#125;</span>\n\t  <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"scoped\"><a href=\"#scoped\" class=\"headerlink\" title=\"scoped\"></a>scoped</h2><h3 id=\"什么是scoped\"><a href=\"#什么是scoped\" class=\"headerlink\" title=\"什么是scoped\"></a>什么是scoped</h3><p>在Vue文件中的style标签上有一个特殊的属性，scoped。当一个style标签拥有scoped属性时候，它的css样式只能用于当前的Vue组件，可以使组件的样式不相互污染。如果一个项目的所有style标签都加上了scoped属性，相当于实现了样式的模块化。</p>\n<h3 id=\"scoped的实现原理\"><a href=\"#scoped的实现原理\" class=\"headerlink\" title=\"scoped的实现原理\"></a>scoped的实现原理</h3><p>Vue中的scoped属性的效果主要是通过PostCss实现的。以下是转译前的代码:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span>red<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>scoped测试案例<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>转译后:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">[</span>data<span class=\"token operator\">-</span>v<span class=\"token operator\">-</span>5558831a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span> data<span class=\"token operator\">-</span>v<span class=\"token operator\">-</span>5558831a<span class=\"token operator\">></span>scoped测试案例<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PostCSS给一个组件中的所有dom添加了一个独一无二的动态属性，给css选择器额外添加一个对应的属性选择器，来选择组件中的dom,这种做法使得样式只作用于含有该属性的dom元素(组件内部的dom)。</p>\n<h3 id=\"scoped的渲染规则\"><a href=\"#scoped的渲染规则\" class=\"headerlink\" title=\"scoped的渲染规则\"></a>scoped的渲染规则</h3><ul>\n<li>给HTML的dom节点添加一个不重复的data属性(例如: data-v-5558831a)来唯一标识这个dom 元素</li>\n<li>在每句css选择器的末尾(编译后生成的css语句)加一个当前组件的data属性选择器(例如：[data-v-5558831a])来私有化样式</li>\n</ul>\n<h2 id=\"sass-和-less-的样式穿透\"><a href=\"#sass-和-less-的样式穿透\" class=\"headerlink\" title=\"sass 和 less 的样式穿透\"></a>sass 和 less 的样式穿透</h2><p>在Vue项目中，当我们引入第三方组件库时(如使用element-ui)，需要在局部组件中修改第三方组件库样式，而又不想去除scoped属性造成组件之间的样式覆盖。这时我们可以通过特殊的方式穿透scoped</p>\n<p>这俩个常用的样式穿透的方式 有俩种 分别是 <strong>&#x2F;deep&#x2F;</strong> 与 <strong>::v-deep</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">外层容器 <span class=\"token operator\">/</span>deep<span class=\"token operator\">/</span> 组件 <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token literal-property property\">外层容器</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span>v<span class=\"token operator\">-</span>deep 组件 <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Vue-是怎么实现响应式的\"><a href=\"#Vue-是怎么实现响应式的\" class=\"headerlink\" title=\"Vue 是怎么实现响应式的\"></a>Vue 是怎么实现响应式的</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//更新视图</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateView</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"视图更新\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//监视数组变化</span>\n<span class=\"token comment\">/**\n *  因为 Object.defineProperty 无法监视数组的变化\n *  所以重新定义数组原型\n */</span>\n<span class=\"token keyword\">const</span> oldArrayProperty <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype\n\n<span class=\"token comment\">//创建对象，原型指向 oldArrayProperty ，再扩展的新方法不会污染原型</span>\n<span class=\"token keyword\">const</span> arrProto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>oldArrayProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'unshift'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'splice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//这个方法主要用来更新视图</span>\n    arrProto<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">监听到数组调用了</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>methodName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">方法</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">//调用原来原型对象上的相应方法</span>\n        oldArrayProperty<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//监听</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">defineReactive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//再次判断data中每个属性是否为需要深度监视，（递归）</span>\n   Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>        \n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> value\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nweValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nweValue <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>nweValue<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//在赋值的时候判断值是否需要深度监视</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改  '</span><span class=\"token operator\">+</span> key<span class=\"token operator\">+</span><span class=\"token string\">' : '</span><span class=\"token operator\">+</span>value<span class=\"token operator\">+</span><span class=\"token string\">'  >>>'</span><span class=\"token punctuation\">,</span>nweValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                value <span class=\"token operator\">=</span> nweValue\n                <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> data <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> data <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> data\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       data<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span>  arrProto\n    <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">aa</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">bb</span><span class=\"token operator\">:</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">cc</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">dd</span><span class=\"token operator\">:</span><span class=\"token number\">222</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">gg</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\ndata<span class=\"token punctuation\">.</span>aa <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\ndata<span class=\"token punctuation\">.</span>bb <span class=\"token operator\">=</span> <span class=\"token string\">'sss'</span>\ndata<span class=\"token punctuation\">.</span>cc<span class=\"token punctuation\">.</span>dd <span class=\"token operator\">=</span> <span class=\"token number\">111</span>\ndata<span class=\"token punctuation\">.</span>bb <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">ee</span><span class=\"token operator\">:</span><span class=\"token string\">'111'</span>\n<span class=\"token punctuation\">&#125;</span>\ndata<span class=\"token punctuation\">.</span>bb<span class=\"token punctuation\">.</span>ee <span class=\"token operator\">=</span> <span class=\"token number\">222</span>\ndata<span class=\"token punctuation\">.</span>gg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"生命周期生命周期图: keep-liveprops include - string | RegExp | Array。只有名称匹配的组件会被缓存。 exclude - string | RegExp | Array。任何名称匹配的组件都不会被缓存。 max - number |...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#keep-live\"><span class=\"toc-text\">keep-live</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#props\"><span class=\"toc-text\">props</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#include-%E5%92%8C-exclude\"><span class=\"toc-text\">include 和 exclude</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#max\"><span class=\"toc-text\">max</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#v-if-VS-v-show\"><span class=\"toc-text\">v-if   VS   v-show</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#v-if-%E4%B8%8E-v-show-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">v-if 与 v-show 的优先级问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ref\"><span class=\"toc-text\">ref</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nextTick\"><span class=\"toc-text\">nextTick</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scoped\"><span class=\"toc-text\">scoped</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFscoped\"><span class=\"toc-text\">什么是scoped</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#scoped%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">scoped的实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#scoped%E7%9A%84%E6%B8%B2%E6%9F%93%E8%A7%84%E5%88%99\"><span class=\"toc-text\">scoped的渲染规则</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sass-%E5%92%8C-less-%E7%9A%84%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F\"><span class=\"toc-text\">sass 和 less 的样式穿透</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue-%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84\"><span class=\"toc-text\">Vue 是怎么实现响应式的</span></a></li></ol>","author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"js类基础","uid":"03aba69ba9901887c6cdf14c73c6fada","slug":"js类基础","date":"2022-05-19T02:16:01.000Z","updated":"2022-05-21T02:06:09.119Z","comments":true,"path":"api/articles/js类基础.json","keywords":null,"cover":"https://pic3.zhimg.com/v2-351d40b868800b34e43724cf80114a9c_1440w.jpg?source=172ae18b","text":"声明类的语法//函数写法 function Stu(name, age) &#123; this.name = name; this.age = age; &#125; //定义方法,在原型上面定义 Stu.prototype.getName = function () &#12...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"generator基础","uid":"01dafa857bbdf984f605b3b52dec3c19","slug":"generator基础","date":"2022-05-17T02:44:43.000Z","updated":"2022-05-17T03:55:26.742Z","comments":true,"path":"api/articles/generator基础.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-c0c6864307042e0bc54270b6cf4e2a95_1440w.jpg?source=172ae18b","text":"Generator 基础入门所谓 Generator 函数它是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即拥有暂停函数执行的效果）。 function* gen() &#123; yield 1; yield 2; yield 3; &#125; let g = ...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}