{"title":"commonJs与ESModule的区别","uid":"77098c3ba710b162837eee255527cd8e","slug":"commonJs与ESModule的区别","date":"2023-03-25T09:28:56.000Z","updated":"2023-03-25T14:28:15.890Z","comments":true,"path":"api/articles/commonJs与ESModule的区别.json","keywords":null,"cover":[],"content":"<h2 id=\"CommonJs\"><a href=\"#CommonJs\" class=\"headerlink\" title=\"CommonJs\"></a>CommonJs</h2><p><strong>CommonJS是Node.js使用的模块规范</strong>，在 Node.js 模块系统中，每个文件都被视为独立的模块(对象)，模块的本地变量将是私有的。</p>\n<p><strong>浏览器中不可使用, 浏览器并没有实现CommonJS</strong></p>\n<h3 id=\"CommonJS的导出\"><a href=\"#CommonJS的导出\" class=\"headerlink\" title=\"CommonJS的导出\"></a>CommonJS的导出</h3><p>CommonJs使用<strong>exports和module.exports导出模块</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> module<span class=\"token punctuation\">.</span>js 文件 <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \n<span class=\"token keyword\">let</span> _moduleName <span class=\"token operator\">=</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  _moduleName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> _moduleName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> setModuleName<span class=\"token punctuation\">,</span> getModuleName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//或</span>\n<span class=\"token comment\">// exports.setModuleName = setModuleName</span>\n<span class=\"token comment\">// exports.getModuleName = getModuleName</span>\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"exports和module-exports的区别\"><a href=\"#exports和module-exports的区别\" class=\"headerlink\" title=\"exports和module.exports的区别\"></a>exports和module.exports的区别</h4><p>两者没有区别，exports和module.exports指向的是同一个引用地址</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">exports <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>exports <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">注意</p>\n<p>    不能使用 exports &#x3D; XXX ，改变了内存地址，导致exports ！&#x3D; module.exports</p>\n</div>\n<h3 id=\"CommonJS的导入\"><a href=\"#CommonJS的导入\" class=\"headerlink\" title=\"CommonJS的导入\"></a>CommonJS的导入</h3><p>CommonJs使用使用<strong>require()导入模块</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span> 导入 module<span class=\"token punctuation\">.</span>js <span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span>\n \n <span class=\"token keyword\">const</span> moduleJS <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module.js\"</span><span class=\"token punctuation\">)</span>\n moduleJS<span class=\"token punctuation\">.</span><span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">let</span> moduleName <span class=\"token operator\">=</span> moduleJS<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//123</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"CommonJs导入模块的查找规则\"><a href=\"#CommonJs导入模块的查找规则\" class=\"headerlink\" title=\"CommonJs导入模块的查找规则\"></a>CommonJs导入模块的查找规则</h4><p>导入格式：require(X)<br><strong>情况一：X是一个Node核心模块(内置模块)，比如path、http</strong></p>\n<ul>\n<li>直接返回内置模块，并且停止查找</li>\n</ul>\n<p><strong>情况二：X是以 .&#x2F; 或 …&#x2F; 或 &#x2F;（根目录）开头的</strong><br>第一步：将X当做一个文件在对应的目录下查找；</p>\n<ol>\n<li><p>如果有x后缀名，按照后缀名的格式查找对应的文件</p>\n</li>\n<li><p>如果没有后缀名，会按照如下顺序：</p>\n<ul>\n<li>直接查找文件X </li>\n<li>查找X.js文件</li>\n<li>查找X.json文件</li>\n<li>查找X.node文件</li>\n</ul>\n</li>\n</ol>\n<p>第二步：没有找到对应的文件，将X作为一个目录</p>\n<ol>\n<li><p>查找目录下面的index文件</p>\n<ul>\n<li>查找X&#x2F;index.js文件</li>\n<li>查找X&#x2F;index.json文件</li>\n<li>查找X&#x2F;index.node文件</li>\n</ul>\n</li>\n<li><p>没有找到，那么报错：not found</p>\n</li>\n</ol>\n<p><strong>情况三：X为第三方库名称（不是核心模块，也不是.&#x2F;等格式）</strong><br>这时会去node_modules文件夹中去寻找</p>\n<p>如果当前文件夹没找到node_modules文件夹, 就会去上层文件夹找, 一层一层的寻找, 以此类推, 找不到就会报错</p>\n<h4 id=\"CommonJs导入模块的方式\"><a href=\"#CommonJs导入模块的方式\" class=\"headerlink\" title=\"CommonJs导入模块的方式\"></a>CommonJs导入模块的方式</h4><p> CommonJs中 <strong>require()方法导入模块是对模块的浅拷贝</strong><br>下面来求证：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/************ module.js ************/</span>\n\n   <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n       a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n       b<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n   module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n       a<span class=\"token punctuation\">,</span>b\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/************ main.js ************/</span>\n   <span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./module.js'</span><span class=\"token punctuation\">)</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app = \"</span><span class=\"token punctuation\">,</span>app<span class=\"token punctuation\">)</span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1s后:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app = \"</span><span class=\"token punctuation\">,</span>app<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行main.js后得到以下结果：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n1s后：\napp <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可见：app中属性a没有发生改变，但身为对象的属性b发生了改变<br><strong>得出结论：require()方法导入模块是对模块的浅拷贝</strong></p>\n<h4 id=\"模块加载过程\"><a href=\"#模块加载过程\" class=\"headerlink\" title=\"模块加载过程\"></a>模块加载过程</h4><p><strong>模块在被第一次引入时，模块中的js代码会被运行一次，并缓存</strong><br><strong>模块被多次引入时，因为已被缓存，最终只加载（运行）一次</strong></p>\n<ul>\n<li>这是因为每个模块对象module都有一个属性：loaded。为false表示还没有加载，为true表示已经加载；</li>\n</ul>\n<p><strong>如果有循环引入，那么加载顺序是什么？</strong><br>如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/************ main.js文件 ************/</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./aa\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./bb'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/************ aa.js文件 ************/</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ccc'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/************ bb.js文件 ************/</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./cc'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ee'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/************ cc.js文件 ************/</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cc'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./dd'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/************ dd.js文件 ************/</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dd'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ee'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/************ ee.js文件 ************/</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ee'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>引用关系图如下<br><img src=\"../codeImg/commonJs-require.jpg\" style=\"width:400px;\"></p>\n<p>这个其实是一种数据结构：图结构；<br>图结构在遍历的过程中，有深度优先搜索（DFS, depth first search）和广度优先搜索（BFS, breadth first search）<br><strong>Node采用的是深度优先算法：main -&gt; aa -&gt; cc -&gt; dd -&gt; ee -&gt; bb</strong></p>\n<p>所以执行main.js文件的结果为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">main\naa\ncc\ndd\nee\nbb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CommonJS规范缺点\"><a href=\"#CommonJS规范缺点\" class=\"headerlink\" title=\"CommonJS规范缺点\"></a>CommonJS规范缺点</h3><p>CommonJS加载模块是同步的</p>\n<ul>\n<li>同步的意味着只有<strong>等到对应的模块加载完毕，当前模块中的内容才能被运行</strong>；</li>\n<li>这个在服务器不会有什么问题，因为服务器加载的js文件都是本地文件，加载速度非常快；</li>\n</ul>\n<p>如果将CommonJS规范应用于浏览器</p>\n<ul>\n<li>浏览器加载js文件需要先从服务器将文件下载下来，之后再加载运行；</li>\n<li>那么采用同步的就意味着后续的js代码都无法正常运行，即使是一些简单的DOM操作；</li>\n</ul>\n<h2 id=\"ESModule\"><a href=\"#ESModule\" class=\"headerlink\" title=\"ESModule\"></a>ESModule</h2><p>ESModule（简称ESM）是一种JavaScript模块系统，是目前JavaScript官方推荐的模块化方案。<strong>ESM支持静态导入和导出，可以在编译时确定模块的依赖关系</strong>，减少了运行时的计算量，提高了性能。<br>与CommonJS模块不同，ESM是采用严格模式的，模块内部的变量不会污染全局作用域。<br>此外，ESM还支持动态导入，允许在运行时根据需要动态加载模块。</p>\n<h3 id=\"ESModule的导出和导入\"><a href=\"#ESModule的导出和导入\" class=\"headerlink\" title=\"ESModule的导出和导入\"></a>ESModule的导出和导入</h3><p>ESModule的导出方式有三种</p>\n<h4 id=\"1-命名导出（Named-Exports）\"><a href=\"#1-命名导出（Named-Exports）\" class=\"headerlink\" title=\"1.命名导出（Named Exports）\"></a>1.命名导出（Named Exports）</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">/************ module.js文件 ************/</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/************ main.js文件 ************/</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> sayHi<span class=\"token punctuation\">,</span> Person <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Tom\"</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hi!\"</span>\n  <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, Jack!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>命名导出的简写方式，又称为批量导出（Export List）</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">/************ module.js文件 ************/</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> hello<span class=\"token punctuation\">,</span> Person <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/************ main.js文件 ************/</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> hello<span class=\"token punctuation\">,</span> Person <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Tom\"</span>\n  <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello!\"</span>\n  <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, Jack!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-默认导出（Default-Exports）\"><a href=\"#2-默认导出（Default-Exports）\" class=\"headerlink\" title=\"2.默认导出（Default Exports）\"></a>2.默认导出（Default Exports）</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/************ module.js文件 ************/</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/************ main.js文件 ************/</span>\n  <span class=\"token keyword\">import</span> sayHi <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hi, Tom!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>默认导出只能导出一个接口。一个模块只能有一个默认导出。这是因为在默认导出中，没有指定名称，只能用默认名称 <code>default</code> 进行引用。</p>\n<h4 id=\"3-混合导出（Mixed-Exports）\"><a href=\"#3-混合导出（Mixed-Exports）\" class=\"headerlink\" title=\"3.混合导出（Mixed Exports）\"></a>3.混合导出（Mixed Exports）</h4><p>混合导出是指在一个模块中既有命名导出，又有默认导出。这种情况下，可以将命名导出和默认导出混合使用。例如：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">/************ module.js文件 ************/</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/************ main.js文件 ************/</span>\n  <span class=\"token keyword\">import</span> sayHi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Tom\"</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hi!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要注意的是，混合导出虽然方便，但容易导致混淆和命名冲突。推荐在一个模块中只使用一种导出方式。</p>\n<h3 id=\"ESModule导入模块的查找规则\"><a href=\"#ESModule导入模块的查找规则\" class=\"headerlink\" title=\"ESModule导入模块的查找规则\"></a>ESModule导入模块的查找规则</h3><p>导入格式：<code>import &#123; name &#125; from &quot;X&quot;</code><br><strong>情况一：X是一个Node核心模块(内置模块)，比如path、http、fs</strong><br>例如：<code>import &#123; readFile &#125; from &quot;fs&quot;</code></p>\n<ul>\n<li>直接返回内置模块，并且停止查找</li>\n</ul>\n<p><strong>情况二：X是以 .&#x2F; 或 …&#x2F; 或 &#x2F;（根目录）开头的</strong><br>例如：<code>import &#123; name &#125; from &quot;./module.js</code></p>\n<ul>\n<li>相对路径或绝对路径的模块，会根据路径查找对应的模块文件</li>\n</ul>\n<p><strong>情况三：X为第三方库名称（不是核心模块，也不是.&#x2F;等格式）</strong><br>例如：<code>import &#123; Button &#125; from &#39;element-ui&#39;</code><br>这时会去node_modules文件夹中去寻找</p>\n<p>如果当前文件夹没找到node_modules文件夹或node_modules文件夹中没有, 就会去上层文件夹找, 一层一层的寻找, 以此类推, 找不到就会报错</p>\n<p>需要注意的是，ESModule的查找规则与CommonJS模块的查找规则不同。在CommonJS模块中，模块的查找是基于文件系统的，而在ESModule中，模块的查找是基于模块标识符的。并且在ESModule中，模块的查找是静态的，即在编译时就已经确定了模块的依赖关系。</p>\n<h4 id=\"模块加载过程-1\"><a href=\"#模块加载过程-1\" class=\"headerlink\" title=\"模块加载过程\"></a>模块加载过程</h4><p><strong>模块在被第一次引入时，模块中的js代码会被运行一次，并缓存</strong><br><strong>模块被多次引入时，因为已被缓存，最终只加载（运行）一次</strong></p>\n","feature":true,"text":"CommonJsCommonJS是Node.js使用的模块规范，在 Node.js 模块系统中，每个文件都被视为独立的模块(对象)，模块的本地变量将是私有的。 浏览器中不可使用, 浏览器并没有实现CommonJS CommonJS的导出CommonJs使用exports和modu...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CommonJs\"><span class=\"toc-text\">CommonJs</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CommonJS%E7%9A%84%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">CommonJS的导出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#exports%E5%92%8Cmodule-exports%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">exports和module.exports的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CommonJS%E7%9A%84%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">CommonJS的导入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CommonJs%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9F%A5%E6%89%BE%E8%A7%84%E5%88%99\"><span class=\"toc-text\">CommonJs导入模块的查找规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CommonJs%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">CommonJs导入模块的方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">模块加载过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CommonJS%E8%A7%84%E8%8C%83%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">CommonJS规范缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ESModule\"><span class=\"toc-text\">ESModule</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ESModule%E7%9A%84%E5%AF%BC%E5%87%BA%E5%92%8C%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">ESModule的导出和导入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%91%BD%E5%90%8D%E5%AF%BC%E5%87%BA%EF%BC%88Named-Exports%EF%BC%89\"><span class=\"toc-text\">1.命名导出（Named Exports）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%BB%98%E8%AE%A4%E5%AF%BC%E5%87%BA%EF%BC%88Default-Exports%EF%BC%89\"><span class=\"toc-text\">2.默认导出（Default Exports）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%B7%B7%E5%90%88%E5%AF%BC%E5%87%BA%EF%BC%88Mixed-Exports%EF%BC%89\"><span class=\"toc-text\">3.混合导出（Mixed Exports）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ESModule%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9F%A5%E6%89%BE%E8%A7%84%E5%88%99\"><span class=\"toc-text\">ESModule导入模块的查找规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B-1\"><span class=\"toc-text\">模块加载过程</span></a></li></ol></li></ol></li></ol>","author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"NVS的常用指令","uid":"3d2ffd4a2e7a0c4e75c1224831f86d5a","slug":"NVS的常用指令","date":"2022-11-04T06:45:23.000Z","updated":"2022-11-04T06:47:37.832Z","comments":true,"path":"api/articles/NVS的常用指令.json","keywords":null,"cover":null,"text":"查看当前使用的nvs版本 nvs –version或者 nvs -v 列出所有可用的nvs版本可供下载 nvs ls-remote本地已下载 nvs ls 下载指定版本，如 nvs add 16、nvs add 16.14、nvs add lts nvs add 删除指定版本，如...","link":"","photos":[],"count_time":{"symbolsCount":377,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}