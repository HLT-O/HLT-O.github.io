{"title":"Vue面试-虚拟DOM","uid":"c60727c6131ffb650a7eb77cb79c7e0e","slug":"Vue面试-虚拟DOM","date":"2022-07-28T13:57:49.000Z","updated":"2022-07-28T14:51:56.552Z","comments":true,"path":"api/articles/Vue面试-虚拟DOM.json","keywords":null,"cover":[],"content":"<h2 id=\"虚拟-DOM\"><a href=\"#虚拟-DOM\" class=\"headerlink\" title=\"虚拟 DOM\"></a>虚拟 DOM</h2><p>虚拟DOM概念随着react的诞生而诞生，由facebook提出，其卓越的性能很快得到广大开发者的认可；继react之后vue2.0也在其核心引入了虚拟DOM的概念</p>\n<h3 id=\"什么是虚拟DOM-VDOM-？\"><a href=\"#什么是虚拟DOM-VDOM-？\" class=\"headerlink\" title=\"什么是虚拟DOM(VDOM)？\"></a>什么是虚拟DOM(VDOM)？</h3><p>vdom可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息。dom 树对应的虚拟 dom 对象（ js 对象），如下：<br><img src=\"../codeImg/code-html.png\" style=\"width:500px;\"><br><img src=\"../codeImg/code-vnode.png\" style=\"width:500px;\"><br>可见上面的DOM结构，不论是标签名称还是标签的属性或标签的子集，都会对应在下面的树结构里。</p>\n<h3 id=\"为什么要使用虚拟DOM？\"><a href=\"#为什么要使用虚拟DOM？\" class=\"headerlink\" title=\"为什么要使用虚拟DOM？\"></a>为什么要使用虚拟DOM？</h3><p>虚拟 dom 是相对于浏览器所渲染出来的真实 dom 的，在react，vue等技术出现之前，我们要改变页面展示的内容只能通过遍历查询 dom 树的方式找到需要修改的 dom 然后修改样式行为或者结构，来达到更新 ui 的目的。这种方式相当消耗计算资源，因为每次查询 dom 几乎都需要遍历整颗 dom 树，如果建立一个与 dom 树对应的虚拟 dom 对象（ js 对象），以对象嵌套的方式来表示 dom 树，那么每次 dom 的更改 就变成了 js 对象的属性的更改 ，这样一来就能查找 js 对象的属性变化要比查询 dom 树的 性能开销小。</p>\n<p>其实并不是查询 dom 树性能开销大而是 dom 树的实现模块和 js 模块是分开的这些跨模块的通讯增加了成本，以及 dom 操作引起的浏览器的回流和重绘，使得性能开销巨大，原本在 pc 端是没有性能问题的，因为 pc 的计算能力强，但是随着移动端的发展，越来越多的网页在智能手机上运行，而手机的性能参差不齐，会有性能问题。</p>\n<p>他们的思想是每次更新 dom 都尽量避免刷新整个页面，而是有针对性的 去刷新那被更改的一部分 ，来释放掉被无效渲染占用的 gpu，cup 性能。</p>\n<ul>\n<li><p>angular 采用的机制是 脏值检测查机制 所有使用了 ng 指令的 scope data 和 插值语法 语法的 scope data 都会被加入脏检测的队列</p>\n</li>\n<li><p>vue 采用的是虚拟dom通过重写 setter ， getter实现观察者监听 data 属性的变化生成新的虚拟 dom 通过 h 函数创建真实 dom 替换掉dom树上对应的旧 dom。</p>\n</li>\n<li><p>react 也是通过虚拟 dom 和 setState 更改 data 生成新的虚拟 dom 以及 diff 算法来计算和生成需要替换的 dom 做到局部更新的。</p>\n</li>\n</ul>\n<h3 id=\"虚拟dom的原理\"><a href=\"#虚拟dom的原理\" class=\"headerlink\" title=\"虚拟dom的原理\"></a>虚拟dom的原理</h3><p>diff算法 深度优先遍历<br>diff的过程就是调用patch函数，就像打补丁一样修改真实dom</p>\n<p>virtual dom有哪些好处<br>虚拟 DOM 不会立马进行排版与重绘操作<br>虚拟 DOM 进行频繁修改，然后一次性比较并修改真实 DOM 中需要改的部分，最后在真实 DOM 中进行排版与重绘，减少过多DOM节点排版与重绘损耗<br>虚拟 DOM 有效降低大面积真实 DOM 的重绘与排版，因为最终与真实 DOM 比较差异，可以只渲染局部<br>虚拟DOM主要做了什么<br>虚拟DOM本身是什么（JS对象）<br>为什么虚拟 DOM 的操作比 DOM 更快；<br>总之，一切为了减弱频繁的大面积重绘引发的性能问题，不同框架不一定需要虚拟DOM，关键看框架是否频繁会引发大面积的DOM操作</p>\n<p>你的知道浏览器的虚拟DOM与真实DOM的区别（注意：需不需要虚拟DOM，其实与框架的DOM操作机制有关）：<br>虚拟DOM不会进行排版与重绘操作<br>虚拟DOM进行频繁修改，然后一次性比较并修改真实DOM中需要改的部分（注意！），最后并在真实DOM中进行排版与重绘，减少过多DOM节点排版与重绘损耗<br>真实DOM频繁排版与重绘的效率是相当低的<br>虚拟DOM有效降低大面积（真实DOM节点）的重绘与排版，因为最终与真实DOM比较差异，可以只渲染局部（同2）<br>使用虚拟DOM的损耗计算：<br>总损耗&#x3D;虚拟DOM增删改+（与Diff算法效率有关）真实DOM差异增删改+（较少的节点）排版与重绘<br>直接使用真实DOM的损耗计算：<br>总损耗&#x3D;真实DOM完全增删改+（可能较多的节点）排版与重绘<br>总之，一切为了减弱频繁的大面积重绘引发的性能问题，不同框架不一定需要虚拟DOM，关键看框架是否频繁会引发大面积的DOM操作</p>\n","feature":true,"text":"虚拟 DOM虚拟DOM概念随着react的诞生而诞生，由facebook提出，其卓越的性能很快得到广大开发者的认可；继react之后vue2.0也在其核心引入了虚拟DOM的概念 什么是虚拟DOM(VDOM)？vdom可以看作是一个使用javascript模拟了DOM结构的树形结构...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F-DOM\"><span class=\"toc-text\">虚拟 DOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9FDOM-VDOM-%EF%BC%9F\"><span class=\"toc-text\">什么是虚拟DOM(VDOM)？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9FDOM%EF%BC%9F\"><span class=\"toc-text\">为什么要使用虚拟DOM？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9Fdom%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">虚拟dom的原理</span></a></li></ol></li></ol>","author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"JS的一些小知识点","uid":"8b4c372403610b1ffccec2e1fcd54ba5","slug":"JS的一些小知识点","date":"2022-05-20T08:20:55.000Z","updated":"2022-07-22T10:35:01.742Z","comments":true,"path":"api/articles/JS的一些小知识点.json","keywords":null,"cover":"https://pic1.zhimg.com/v2-24b5a3482fee259eb8a3ad396b36d9b4_r.jpg?source=172ae18b","text":"var 、let 、const 的区别 var let const 作用域 函数作用域 块级作用域 块级作用域 变量提升 会变量提升，且会初始化赋值为undefined 会变量提升,但不会初始化(存在暂时性死区) 会变量提升,但不会初始化(存在暂时性死区) 能否修改 能修改 能修...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}