{"title":"跨域问题及解决方案","uid":"ce01ca98a6449b03113a31764fa5119c","slug":"跨域问题及解决方案","date":"2023-04-25T14:26:39.000Z","updated":"2023-04-25T14:26:48.364Z","comments":true,"path":"api/articles/跨域问题及解决方案.json","keywords":null,"cover":[],"content":"<h1 id=\"跨域问题及解决方案\"><a href=\"#跨域问题及解决方案\" class=\"headerlink\" title=\"跨域问题及解决方案\"></a>跨域问题及解决方案</h1><h2 id=\"同源策略及跨域问题\"><a href=\"#同源策略及跨域问题\" class=\"headerlink\" title=\"同源策略及跨域问题\"></a>同源策略及跨域问题</h2><p><strong>同源策略</strong>是一套浏览器<strong>安全机制</strong>，当一个<strong>源</strong>的文档和脚本，与另一个<strong>源</strong>的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。</p>\n<p>简单来说，同源策略对 <strong>同源资源</strong> <strong>放行</strong>，对 <strong>异源资源</strong> <strong>限制</strong></p>\n<p>因此限制造成的开发问题，称之为<strong>跨域（异源）问题</strong></p>\n<h3 id=\"同源和异源\"><a href=\"#同源和异源\" class=\"headerlink\" title=\"同源和异源\"></a>同源和异源</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">源(origin) &#x3D; 协议 + 域名 + 端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如:</p>\n<p><code>https://study.duyiedu.com/api/movie</code>的源为<code>https://study.duyiedu.com</code></p>\n<p><code>http://localhost:7001/index.html</code>的源为<code>http://localhost:7001</code></p>\n<p>两个URL地址的源<strong>完全相同</strong>，则称之为<strong>同源</strong>，否则称之为<strong>异源（跨域）</strong></p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301121634016.png\" alt=\"image-20230112163455982\"></p>\n<h3 id=\"跨域出现的场景\"><a href=\"#跨域出现的场景\" class=\"headerlink\" title=\"跨域出现的场景\"></a>跨域出现的场景</h3><p>跨域可能出现在三种场景：</p>\n<ul>\n<li><p><strong>网络通信</strong></p>\n<p>a元素的跳转；加载css、js、图片等；AJAX等等</p>\n</li>\n<li><p>JS API</p>\n<p><code>window.open</code>、<code>window.parent</code>、<code>iframe.contentWindow</code>等等</p>\n</li>\n<li><p>存储</p>\n<p><code>WebStorage</code>、<code>IndexedDB</code>等等</p>\n</li>\n</ul>\n<p>对于不同的跨域场景，以及每个场景中不同的跨域方式，同源策略都有不同的限制。</p>\n<p>本文重点讨论<strong>网络通信</strong>中<code>AJAX</code>的跨域问题</p>\n<h3 id=\"网络中的跨域\"><a href=\"#网络中的跨域\" class=\"headerlink\" title=\"网络中的跨域\"></a>网络中的跨域</h3><p>当浏览器运行页面后，会发出很多的网络请求，例如CSS、JS、图片、AJAX等等</p>\n<p>请求页面的源称之为<strong>页面源</strong>，在该页面中发出的请求称之为<strong>目标源</strong>。</p>\n<p>当页面源和目标源一致时，则为<strong>同源请求</strong>，否则为<strong>异源请求（跨域请求）</strong></p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301121636551.png\" alt=\"image-20230112163616513\"></p>\n<h3 id=\"浏览器如何限制异源请求？\"><a href=\"#浏览器如何限制异源请求？\" class=\"headerlink\" title=\"浏览器如何限制异源请求？\"></a>浏览器如何限制异源请求？</h3><p>浏览器出于多方面的考量，制定了非常繁杂的规则来限制各种跨域请求，但总体的原则非常简单：</p>\n<ul>\n<li>对标签发出的跨域请求轻微限制</li>\n<li>对AJAX发出的跨域请求<strong>严厉限制</strong></li>\n</ul>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301122010888.png\" alt=\"image-20230112201027855\"></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>CORS（Cross-Origin Resource Sharing）是最正统的跨域解决方案，同时也是浏览器推荐的解决方案。</p>\n<p>CORS是一套规则，用于帮助浏览器判断是否校验通过。</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301122025029.png\" alt=\"image-20230112202539003\"></p>\n<p>CORS的基本理念是：</p>\n<ul>\n<li>只要服务器明确表示<strong>允许</strong>，则校验<strong>通过</strong></li>\n<li>服务器明确拒绝或没有表示，则校验不通过</li>\n</ul>\n<p><strong>所以，使用CORS解决跨域，必须要保证服务器是「自己人」</strong></p>\n<h4 id=\"请求分类\"><a href=\"#请求分类\" class=\"headerlink\" title=\"请求分类\"></a>请求分类</h4><p>CORS将请求分为两类：&#x3D;&#x3D;简单请求&#x3D;&#x3D;和&#x3D;&#x3D;预检请求&#x3D;&#x3D;。</p>\n<p>对不同种类的请求它的规则有所区别。</p>\n<p>所以要理解CORS，首先要理解它是如何划分请求的。</p>\n<h5 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>完整判定逻辑：<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests</a></p></blockquote>\n<p>简单来说，只要全部满足下列条件，就是简单请求：</p>\n<ul>\n<li><p>请求方法是<code>GET</code>、<code>POST</code>、<code>HEAD</code>之一</p>\n</li>\n<li><p>头部字段满足CORS安全规范，详见 <a href=\"https://fetch.spec.whatwg.org/#cors-safelisted-request-header\">W3C</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>浏览器默认自带的头部字段都是满足安全规范的，只要开发者不改动和新增头部，就不会打破此条规则</p></blockquote>\n</li>\n<li><p>如果有<code>Content-Type</code>，必须是下列值中的一个</p>\n<ul>\n<li><code>text/plain</code></li>\n<li><code>multipart/form-data</code></li>\n<li><code>application/x-www-form-urlencoded</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"预检请求-preflight\"><a href=\"#预检请求-preflight\" class=\"headerlink\" title=\"预检请求(preflight)\"></a>预检请求(preflight)</h5><p>只要不是简单请求，均为预检请求</p>\n<h5 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 下面的跨域请求哪些是简单请求，哪些是预检请求</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://douyin.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://douyin.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://douyin.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://douyin.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"对简单请求的验证\"><a href=\"#对简单请求的验证\" class=\"headerlink\" title=\"对简单请求的验证\"></a>对简单请求的验证</h4><p><img src=\"http://mdrs.yuanjin.tech/img/202301122045614.png\" alt=\"image-20230112204546583\"></p>\n<h4 id=\"对预检请求的验证\"><a href=\"#对预检请求的验证\" class=\"headerlink\" title=\"对预检请求的验证\"></a>对预检请求的验证</h4><ol>\n<li>发送预检请求</li>\n</ol>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301122046532.png\" alt=\"image-20230112204634493\"></p>\n<ol start=\"2\">\n<li>发送真实请求（和简单请求一致）</li>\n</ol>\n<h4 id=\"细节1-关于cookie\"><a href=\"#细节1-关于cookie\" class=\"headerlink\" title=\"细节1 - 关于cookie\"></a>细节1 - 关于cookie</h4><p>默认情况下，ajax的跨域请求并不会附带cookie，这样一来，某些需要权限的操作就无法进行</p>\n<p>不过可以通过简单的配置就可以实现附带cookie</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// xhr</span>\n<span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fetch api</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">\"include\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样一来，该跨域的ajax请求就是一个<em>附带身份凭证的请求</em></p>\n<p>当一个请求需要附带cookie时，无论它是简单请求，还是预检请求，都会在请求头中添加<code>cookie</code>字段</p>\n<p>而服务器响应时，需要明确告知客户端：服务器允许这样的凭据</p>\n<p>告知的方式也非常的简单，只需要在响应头中添加：<code>Access-Control-Allow-Credentials: true</code>即可</p>\n<p>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。</p>\n<p>另外要特别注意的是：**对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin 的值为*</code>*<em>。这就是为什么不推荐使用</em>的原因</p>\n<h4 id=\"细节2-关于跨域获取响应头\"><a href=\"#细节2-关于跨域获取响应头\" class=\"headerlink\" title=\"细节2 - 关于跨域获取响应头\"></a>细节2 - 关于跨域获取响应头</h4><p>在跨域访问时，JS只能拿到一些最基本的响应头，如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p>\n<p><code>Access-Control-Expose-Headers</code>头让服务器把允许浏览器访问的头放入白名单，例如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Access-Control-Expose-Headers: authorization, a, b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样JS就能够访问指定的响应头了。</p>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>在很久很久以前…并没有CORS方案</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301122054396.png\" alt=\"image-20230112205454350\"></p>\n<p>在那个年代，古人靠着非凡的智慧来解决这一问题</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301122056031.png\" alt=\"image-20230112205613983\"></p>\n<p>虽然可以解决问题，但JSONP有着明显的缺陷：</p>\n<ul>\n<li><p>仅能使用GET请求</p>\n</li>\n<li><p>容易产生安全隐患</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>恶意攻击者可能利用<code>callback=恶意函数</code>的方式实现<code>XSS</code>攻击</p></blockquote>\n</li>\n<li><p>容易被非法站点恶意调用</p>\n</li>\n</ul>\n<p><strong>因此，除非是某些特殊的原因，否则永远不应该使用JSONP</strong></p>\n<h3 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h3><p>CORS和JSONP均要求服务器是「自己人」</p>\n<p>那如果不是呢？</p>\n<img src=\"http://mdrs.yuanjin.tech/img/202301122105697.png\" alt=\"image-20230112210551647\" style=\"zoom:50%;\" />\n\n<p>那就找一个中间人（代理）</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301151333985.png\" alt=\"image-20230115133326930\"></p>\n<p>比如，前端小王想要请求获取王者荣耀英雄数据，但直接请求腾讯服务器会造成跨域</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301151337612.png\" alt=\"image-20230115133732560\"></p>\n<p>由于腾讯服务器不是「自己人」，小王决定用代理解决</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301151338609.png\" alt=\"image-20230115133817554\"></p>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>最重要的，是要保持<strong>生产环境和开发环境一致</strong></p>\n<p>下面是一张决策图</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301151453393.png\" alt=\"image-20230115145335319\"></p>\n<p>具体的几种场景</p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301151506803.png\" alt=\"image-20230115150610750\"></p>\n<p><img src=\"http://mdrs.yuanjin.tech/img/202301151514837.png\" alt=\"image-20230115151406797\"></p>\n","feature":true,"text":"跨域问题及解决方案同源策略及跨域问题同源策略是一套浏览器安全机制，当一个源的文档和脚本，与另一个源的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。 简单来说，同源策略对 同源资源 放行，对 异源资源 限制 因此限制造成的开发问题，称之为跨域（异源）问题 同源和异源源(...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">跨域问题及解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">同源策略及跨域问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%BA%90%E5%92%8C%E5%BC%82%E6%BA%90\"><span class=\"toc-text\">同源和异源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9F%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">跨域出现的场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">网络中的跨域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E9%99%90%E5%88%B6%E5%BC%82%E6%BA%90%E8%AF%B7%E6%B1%82%EF%BC%9F\"><span class=\"toc-text\">浏览器如何限制异源请求？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CORS\"><span class=\"toc-text\">CORS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">请求分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">简单请求</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82-preflight\"><span class=\"toc-text\">预检请求(preflight)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E7%9A%84%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">对简单请求的验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82%E7%9A%84%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">对预检请求的验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%86%E8%8A%821-%E5%85%B3%E4%BA%8Ecookie\"><span class=\"toc-text\">细节1 - 关于cookie</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%86%E8%8A%822-%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4\"><span class=\"toc-text\">细节2 - 关于跨域获取响应头</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSONP\"><span class=\"toc-text\">JSONP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">如何选择</span></a></li></ol></li></ol></li></ol>","author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"浏览器事件循环","uid":"9afd3519d234e5d16b412f84ce601c21","slug":"浏览器事件循环","date":"2023-04-25T14:24:03.000Z","updated":"2023-04-25T14:24:25.731Z","comments":true,"path":"api/articles/浏览器事件循环.json","keywords":null,"cover":[],"text":"事件循环浏览器的进程模型何为进程？程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程 每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。 何为线程？有了进程后，就可以运行程序的代码了。 运行代码的「人」称之为「线程」。 一个进程至少有一个线...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"HLT","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-bd05131cd8bea6dc03a408183fc37d22_r.jpg","link":"/","description":"想好好学习,并且记录学习痕迹<br/><h2>加油！！！</h2>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}